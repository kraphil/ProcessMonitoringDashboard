from dash import Dash, dash_table, dcc, html
from dash.dependencies import Input, Output
import pandas as pd
import base64
from PIL import Image
import plotly.express as px

import plotly.graph_objects as go

#hier you can add the path of your dataset 
df = pd.read_csv('/Users/pc/Documents/work/Data_visualistion/dateWithAnnomalieType.csv')
#make the first cloumn as id 
df['id'] = df.iloc[:, 0]
#print(df)
df.set_index('id', inplace=True, drop=False)
#print(df.head())

#hier a function to show a photo 
def b64_image(image_filename):
    with open(image_filename, 'rb') as f:
        image = f.read()
    return 'data:image/png;base64,' + base64.b64encode(image).decode('utf-8')

image_path = '/Users/pc/Documents/work/Data_visualistion/small_log.png'

#Using Pillow to read the the image
pil_img = Image.open("/Users/pc/Documents/work/Data_visualistion/small_log.png")

app = Dash(__name__)

app.layout = html.Div([
    dash_table.DataTable(
        id='datatable-row-ids',
        columns=[
            {'name': i, 'id': i, 'deletable': False} for i in df.columns
            # omit the id column
            if i != 'id'
        ],
        data=df.to_dict('records'),
        editable=False,
        filter_action="native",
        sort_action="native",
        sort_mode='multi',
        row_selectable='single',
        row_deletable=False,
        selected_rows=[],
        page_action='native',
        page_current= 0,
        page_size= 10,
    ),
    html.Div(id='datatable-row-ids-container'),
    html.H1('business process workflow'),

   # html.Img(src=image_path),                          # passing the direct file path
   # html.Img(src=app.get_asset_url('my-image.png')),    # usign get_asset_url function
   #html.Img(src=dash.get_asset_url('my-image.png'))    Or with newer Dash v2.2.0
    #html.Img(src=pil_img),                             # using the pillow image variable
    html.Img(src=b64_image(image_path)),
    
   
    ])


@app.callback(
    Output('datatable-row-ids-container', 'children'),
    Input('datatable-row-ids', 'derived_virtual_row_ids'),
    Input('datatable-row-ids', 'selected_row_ids'),
    Input('datatable-row-ids', 'active_cell'))
def update_graphs(row_ids, selected_row_ids, active_cell):
    # When the table is first rendered, `derived_virtual_data` and
    # `derived_virtual_selected_rows` will be `None`. This is due to an
    # idiosyncrasy in Dash (unsupplied properties are always None and Dash
    # calls the dependent callbacks when the component is first rendered).
    # So, if `rows` is `None`, then the component was just rendered
    # and its value will be the same as the component's dataframe.
    # Instead of setting `None` in here, you could also set
    # `derived_virtual_data=df.to_rows('dict')` when you initialize
    # the component.
    selected_id_set = set(selected_row_ids or [])

    if row_ids is None:
        dff = df
        # pandas Series works enough like a list for this to be OK
        row_ids = df['id']
    else:
        dff = df.loc[row_ids]

    active_row_id = active_cell['row_id'] if active_cell else None

    
              
    colors = ['#FF69B4' if id == active_row_id
              else '#7FDBFF' if id in selected_id_set
              else '#0074D9'
              for id in row_ids]

    return [
        dcc.Graph(
            id=column + '--row-ids',
            figure={
                'data': [
                    {
                        'x':dff[column] ,
                        'y': dff.iloc[:, 0].value_counts(),
                        'type': 'bar',
                        'marker': {'color': colors},
                    },
                ],
                'layout': {
                    'xaxis': {'automargin': True},
                    'yaxis': {
                        'automargin': True,
                        'title': {'text': 'Anomalie'}
                    },
                    'height': 250,
                    'margin': {'t': 10, 'l': 10, 'r': 10},
                },
            },
        )
        # check if column exists - user may have deleted it
        # If `column.deletable=False`, then you don't
        # need to do this check.
        for column in ['Annomalie_type'] if column in dff
    
    ]

if __name__ == '__main__':
    app.run_server(debug=True)

    
